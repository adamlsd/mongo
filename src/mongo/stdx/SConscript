# -*- mode: python -*-

Import("env")

env = env.Clone()

env.Benchmark(
    target='condition_variable_bm',
    source=[
        'condition_variable_bm.cpp',
    ],
    LIBDEPS=[
    ],
)

env.Library(
    target='stdx',
    source=[
        'set_terminate_internals.cpp',
    ],
    LIBDEPS=[
        # Ideally, there should be no linking dependencies upon any other libraries, for `libstdx`.
        # This library is a shim filling in for deficiencies in various standard library
        # implementations.  There should never be any link-time dependencies into mongo internals.
    ],
)

# Needs to be a different test -- It has to have direct control over the `main()` entry point.
env.CppUnitTest(
    target='set_terminate_dispatch_test',
	source=[
        'set_terminate_dispatch_test.cpp',
    ],
    LIBDEPS=[
    ]
)

# Needs to be a different test -- It has to have direct control over the `main()` entry point.
env.CppUnitTest(
    target='set_terminate_from_main_die_in_thread_test',
	source=[
        'set_terminate_from_main_die_in_thread_test.cpp',
    ],
    LIBDEPS=[
    ]
)

# Needs to be a different test -- It has to have direct control over the `main()` entry point.
env.CppUnitTest(
    target='set_terminate_from_thread_die_in_main_test',
	source=[
        'set_terminate_from_thread_die_in_main_test.cpp',
    ],
    LIBDEPS=[
    ]
)

# Needs to be a different test -- It has to have direct control over the `main()` entry point.
env.CppUnitTest(
    target='set_terminate_from_thread_die_in_thread_test',
	source=[
        'set_terminate_from_thread_die_in_thread_test.cpp',
    ],
    LIBDEPS=[
    ]
)

env.CppUnitTest(
    target='stdx_test',
    source=[
        'unordered_map_test.cpp'
    ],
    LIBDEPS=[
        '$BUILD_DIR/third_party/shim_abseil',
    ],
)
